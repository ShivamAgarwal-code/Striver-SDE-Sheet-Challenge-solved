/************************************************************

    Following is the Binary Tree node structure
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/

#include<bits/stdc++.h>
using namespace std;
int maxi;
 pair<pair<int,int>,pair<int,int>> solve(TreeNode<int>* root)
 {
     if(root==NULL)
     {
         pair<pair<int,int>,pair<int,int>>p={{INT_MIN,INT_MAX},{true,0}};
         return p;
     }
     
      pair<pair<int,int>,pair<int,int>> l=solve(root->left);
      pair<pair<int,int>,pair<int,int>> r=solve(root->right);
      
     if(root->data>l.first.first && root->data<r.first.second
      && l.second.first==true && r.second.first==true)
      
     {
          pair<pair<int,int>,pair<int,int>> p={{max(r.first.first,root->data),min(l.first.second,root->data)},{true,l.second.second+r.second.second+1}};
          
           maxi=max(maxi,l.second.second+r.second.second+1);                
           return p;
     }
     
     

     else
     
     {
             pair<pair<int,int>,pair<int,int>> p={{INT_MIN,INT_MAX},{false,0}};
             
             return p;
    }
 }
int largestBST(TreeNode<int>* root) 
{
    // Write your code here.
    if(root==NULL)
    {
        return 0;
    }
    maxi=0;
    pair<pair<int,int>,pair<int,int>>p=solve(root); 
    return maxi;
      
}
